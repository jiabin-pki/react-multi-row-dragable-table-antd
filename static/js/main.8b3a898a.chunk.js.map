{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DragHandle","sortableHandle","active","MenuOutlined","style","cursor","color","SortableItem","sortableElement","props","SortableContainer","sortableContainer","SortableTable","state","dataSource","data","selectedItems","onSortEnd","oldIndex","newIndex","tempDataSource","length","filteredItems","forEach","d","push","newData","i","includes","merge","movingItem","splice","setState","DraggableContainer","useDragHandle","disableAutoscroll","helperClass","DraggableBodyRow","className","restProps","index","findIndex","x","selected","onClick","e","ctrlKey","metaKey","indexOf","title","dataIndex","width","render","dd","a","b","aa","slice","this","pagination","columns","getColumns","rowKey","components","body","wrapper","row","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.8b3a898a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"antd/dist/antd.css\";\n\nimport { Table } from \"antd\";\nimport {\n  sortableContainer,\n  sortableElement,\n  sortableHandle\n} from \"react-sortable-hoc\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport data from './data.json'\n\nconst DragHandle = sortableHandle(({active}) => (\n  <MenuOutlined style={{ cursor: \"grab\", color: active ? \"blue\":\"#999\" }} />\n));\n\n\nconst SortableItem = sortableElement((props) =><tr {...props} />);\nconst SortableContainer = sortableContainer((props) => <tbody {...props} />);\n\nclass SortableTable extends React.Component {\n  state = {\n    dataSource: data,\n    selectedItems: []\n  };\n\n  getColumns() {\n    return [\n      {\n        title: \"Sort\",\n        dataIndex: \"\",\n        width: 30,\n        className: \"drag-visible\",\n        render: (d, dd, i) => (\n          <>\n\n            <DragHandle active={this.state.selectedItems.includes(i)}/>\n          </>\n        )\n      },\n      {\n        title: \"Name\",\n        dataIndex: \"name\",\n        className: \"drag-visible\"\n      },\n      {\n        title: \"Age\",\n        dataIndex: \"age\"\n      },\n      {\n        title: \"Address\",\n        dataIndex: \"address\"\n      }\n    ];\n  }\n  merge(a, b, i = 0) {\n    let aa = [...a];\n    return [...a.slice(0, i), ...b, ...aa.slice(i, aa.length)];\n  }\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    const { dataSource, selectedItems } = this.state;\n    let tempDataSource = dataSource;\n\n    if (oldIndex !== newIndex) {\n      if (!selectedItems.length) {\n        let movingItem = tempDataSource[oldIndex]\n        tempDataSource.splice(oldIndex, 1)\n        tempDataSource = this.merge(tempDataSource, [movingItem], newIndex)\n      } else {\n        let filteredItems = [];\n        selectedItems.forEach((d) => {\n          filteredItems.push(tempDataSource[d]);\n        });\n        let newData = [];\n        tempDataSource.forEach((d, i) => {\n          if (!selectedItems.includes(i)) {\n            newData.push(d);\n          }\n        });\n        tempDataSource = [...newData];\n        tempDataSource = this.merge(tempDataSource, filteredItems, newIndex);\n      }\n      this.setState({ dataSource: tempDataSource, selectedItems: [] });\n    }\n  };\n\n  DraggableContainer = (props) => (\n    <SortableContainer\n      useDragHandle\n      disableAutoscroll\n      helperClass=\"row-dragging\"\n      onSortEnd={this.onSortEnd}\n      {...props}\n    />\n  );\n\n  DraggableBodyRow = ({ className, style, ...restProps }) => {\n    const { dataSource } = this.state;\n    // function findIndex base on Table rowKey props and should always be a right array index\n    const index = dataSource.findIndex(\n      (x) => x.index === restProps[\"data-row-key\"]\n    );\n    return (\n      <SortableItem\n        index={index}\n        {...restProps}\n        selected={this.state.selectedItems.length}\n        onClick={(e) => {\n            if(e.ctrlKey || e.metaKey) {\n              let {selectedItems} = this.state;\n              selectedItems.includes(index)\n                ? selectedItems.splice(\n                    selectedItems.indexOf(index),\n                    1\n                  )\n                : selectedItems.push(index);\n                this.setState({...selectedItems}) \n              } else {this.setState({selectedItems:[]})}\n        }}\n      />\n    );\n  };\n\n  render() {\n    const { dataSource, selectedItems } = this.state;\n    return (\n        <>\n\n      <h3>\"CNTRL + Click\" to select multiple items</h3>\n\n      <Table\n        pagination={false}\n        dataSource={dataSource}\n        columns={this.getColumns()}\n        rowKey=\"index\"\n\n        components={{\n          body: {\n            wrapper: this.DraggableContainer,\n            row: this.DraggableBodyRow\n          }\n        }}\n      />\n      {selectedItems.length ? <>{selectedItems.length} items selected </> : ''}\n      </>\n    );\n  }\n}\n\nexport default SortableTable","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}